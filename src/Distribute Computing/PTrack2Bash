#!/usr/bin/perl
use POSIX;
use threads;
use threads::shared;
use Time::HiRes;

if ($#ARGV < 3){
	print "--------------------------------------------------------\n";
	print "Uso: PTrack2Bash [Carpeta] [Carpeta Destino] [D] [W]\n";
	print "-Carpeta: Carpeta donde ubicar las imagenes\n";
	print "-Carpeta Destino: Carpeta de destino de los datos\n";
	print "-D: Parametro de diametro de PTrack\n";
	print "-W: Parametro de peso de PTrack\n";
	print "--------------------------------------------------------\n";
	exit;
}

#-------------------------------------
# - Carpeta fuente de imagenes;
# - Destino de los datos procesados;
# - Diametro para PTrack
# - Peso para PTrack
#-------------------------------------
my $FOLDER=$ARGV[0];
my $DEST=$ARGV[1];
my $DE=$ARGV[2];
my $WU=$ARGV[3];

#-------------------------------------
# Datos de servidores
# - Direccion IP
# - Procesos en paralelo
# - CUDA Habilitado
# - Cantidad de dispositivos CUDA
#-------------------------------------
my @MYSERVERS;
my @MYPARALLEL_LIMIT;
my @MYCUDA;
my @MYCUDA_DEV;

#----------------------------------------------
# Chequea un servidor
# Parametro $1: IP del servidor
#---------------------------------------------- 
sub CheckServer{
	($myip) = @_;
	system "ping -t 5 -c 3 $myip >> /tmp/pingtest.txt";
	my $alive=$?;
	if($alive == 0){
		system "ssh -q -o 'BatchMode=yes' $USER\@$SERVER[$i] 'rm *.tif; rm Out/*;'";
		my $sshalive=$?;
		if($sshalive == 0){
			return 0;
		}else{
			return 2;
		}
	}else{
		return 1;
	}
}

#----------------------------------------------
# Chequea e integra los datos de configuracion
#---------------------------------------------- 
sub CheckConfigFile{
	print ">> Reading user configuration file...\n";
	do "$ENV{HOME}/.PTrack2Bash.conf"
		or die ">> No configuration file found, please create a new one.";
	
	my $limit=scalar(@SERVER);
	for($i = 0; $i < $limit; $i++){
		print ">> Checking Server: @SERVER[$i] -> @PARALLEL_LIMIT[$i]";
		if( @CUDA[$i] >= 1 ){
			print " CUDA Enabled"
		}
		print "\n";
		
		if( @SERVER[$i] != $HOST ){
			my $ret = CheckServer(@SERVER[$i]);
			if($ret == 0){
				print ">> Server @SERVER[$i] is Alive. SSH is responding. Server OK!\n";
				push(@MYSERVERS,@SERVER[$i]);
				push(@MYPARALLEL_LIMIT,@PARALLEL_LIMIT[$i]);
				push(@MYCUDA,@CUDA[$i]);
				push(@MYCUDA_DEV, @CUDA_DEV[$i]);
			}
			if($ret == 1){
				print ">> Server @SERVER[$i] is not responding, discarding server.\n";
			}
			if($ret == 2){
				print ">> Server @SERVER[$i] is Alive. But SSH is not responding or is not properly configured, discarding server.\n";
			}
		}else{
			push(@MYSERVERS,@SERVER[$i]);
			push(@MYPARALLEL_LIMIT,@PARALLEL_LIMIT[$i]);
			push(@MYCUDA,@CUDA[$i]);
			push(@MYCUDA_DEV, @CUDA_DEV[$i]);
		}
	}

	print ">> Host: $HOST\n";
	print ">> Try Limit: $TRY_LIMIT\n";
	print ">> User: $USER\n";	
}

#-----------------------------------------
# Ejecuta el procesamiento de una imagen
# Parametro $1: IP del servidor
# Parametro $2: CUDA Habilitado o no
# Parametro $3: Dispositivo cuda, si aplica. [0,1,2...]
# Parametro $4: Imagen a procesar
#-----------------------------------------
sub runServer{
	($myip, $mycuda, $mycudadev, $img) = @_;
	
	print MYPROCFILE ">> [$myip]: Processing Image: $img ";
	if( $mycuda == 1 ){
		print MYPROCFILE "- CUDA Device $mycudadev";
	}
	print MYPROCFILE "\n";
	
	my $myfile=substr($img, -14, 14);
	my $myoutfile="xysl".substr($img, -8, 4);
	
	# Ejecutar en Servidor o local
	if($myip ne $HOST){
		print MYPROCFILE ">> [$myip]: Transfering data $myfile\n";
		system("scp -q $FOLDER/$myfile $USER\@$myip:/Users/$USER");
		print MYPROCFILE ">> [$myip]: Data transfer complete\n";
		if( $mycuda == 1 ){
			if( $mycudadev == 0 ){
				system("ssh -q -o 'BatchMode=yes' $USER\@$myip 'PTrack2 chi2hdcuda -d $DE -w $WU -silent -i $myfile -outbin ./Out/$myoutfile; exit;'");
			}else{
				system("ssh -q -o 'BatchMode=yes' $USER\@$myip 'PTrack2 chi2hdcuda -d $DE -w $WU -silent -i $myfile -device $mycudadev -outbin ./Out/$myoutfile; exit;'");
			}
		}else{
			system("ssh -q -o 'BatchMode=yes' $USER\@$myip 'PTrack2 chi2hd -d $DE -w $WU -silent -i $myfile -outbin ./Out/$myoutfile; exit;'");
		}
	}else{
		if( $mycuda == 1 ){
			if( $mycudadev == 0 ){
				system("PTrack2 chi2hdcuda -d $DE -w $WU -silent -i $FOLDER/$myfile -outbin $DEST/$myoutfile");
			}else{
				system("PTrack2 chi2hdcuda -d $DE -w $WU -silent -i $FOLDER/$myfile -device $mycudadev -outbin $DEST/$myoutfile");
			}
		}else{
			system("PTrack2 chi2hd -d $DE -w $WU -silent -i $FOLDER/$myfile -outbin $DEST/$myoutfile");
		}
	}
}

#-----------------------------------------
# Ejecuta en un servidor el procesamiento
# de imagenes
# Parametro $1: IP del servidor
# Parametro $2: Cantidad de procesos en paralelo
# Parametro $3: CUDA Habilitado o no
# Parametro $4: Dispositivo cuda, si aplica. [0,1,2...]
#-----------------------------------------
sub start_server{
	($myip, $myprocess, $mycuda, $mycudadev) = @_;
	
	my @mypacket;
	my $currentDev=0;
	while( 1 ){
		# Obtener paquete de datos
		@mypacket = getPacket($myprocess);
		if( 0 < @mypacket ){
			# Ejecutar 1 proceso 1 imagen
			my @process;
			
			foreach $img (@mypacket){
				if( $currentDev < $mycudadev-1){
					$currentDev += 1;
				}else{
					$currentDev = 0;
				}
				my $thr = threads->create('runServer', ($myip, $mycuda, $currentDev, $img));
				push(@process, $thr);
			}
			
			# Esperar a que terminen los procesos
			foreach $thrd (@process){
				$thrd->join();
			}
			
			# Recuperar datos
			if($myip ne $HOST){
				system("scp -q -r $USER\@$myip:/Users/$USER/Out/* $DEST/");
				print MYPROCFILE ">> Data retrieve from $myip \n";
				system("ssh -q -o 'BatchMode=yes' $USER\@$myip 'rm *.tif; rm Out/*;'");
				print MYPROCFILE ">> Images and Data deleted from $myip \n";
			}
			
			# Chequear datos
			checkPacket($myip, @mypacket);
		}else{
			print MYPROCFILE "[$myip-$myprocess] => No Packets Available. Good Bye!\n";
			threads->exit();
		}
	}
}

my @IMG_STACK:shared;
my @RETRY_HISTORY_STACK:shared;
#-------------------------------
# Construir packete de imagenes
# Parametro $1: Tama√±o del paquete
#-------------------------------
sub getPacket{
	($maxPacket) = @_;
	my @packet;
	lock(@IMG_STACK);
		my $img_stack_size = @IMG_STACK;
		for($pi=0; $pi < $img_stack_size && $pi < $maxPacket; $pi++){
			push(@packet,pop(@IMG_STACK));
		}
	
	return @packet;
}

#--------------------------------------------------
# Chequea la existencia de los archivos de salida
# con la forma xysl####
# Parametro $1: IP del servidor para chequear si esta vivo
# Parametro $2: Arreglo de imagenes
#--------------------------------------------------
sub checkPacket{
	($myip, @images) = @_;
	print "My IP: $myip\n";
	my $fcount = 0;
	foreach $img (@images){
		my $xysl = $DEST."/xysl".substr($img, -8, 4);
		if(! -e $xysl ){
			$fcount += 1;
			lock(@IMG_STACK);
			lock(@RETRY_HISTORY_STACK);
			
			push(@RETRY_HISTORY_STACK, $img);
			my $hcounter = 0;
			foreach $rimg (@RETRY_HISTORY_STACK){
				if($rimg eq $img){
					$hcounter +=1;
				}
			}
			
			print MYPROCFILE ">> $img failed to process, trying to re process $hcounter times \n";
			if( $hcounter < $TRY_LIMIT ){
				push(@IMG_STACK, $img);
			}else{
				print MYPROCFILE ">> Try limit to process $img reached, discarding image\n";
				print MYERRFILE ">> Failed to process $img\n";
			}
		}
	}
	
	# Chequear que siga vivo el servidor
	my $total = scalar(@images);
	if($fcount == $total and $myip ne $HOST){
		my $ret = CheckServer($myip);
		if($ret == 1){
			print ">> Server $myip is down, stoping server process\n";
			print MYPROCFILE ">> Server $myip is down, stoping server process\n";
			print MYERRFILE ">> Server $myip is down, stoping server process\n";
			threads->exit();
		}
		if($ret == 2){
			print ">> Server SSH $myip is down, stoping server process\n";
			print MYPROCFILE ">> Server SSH $myip is down, stoping server process\n";
			print MYERRFILE ">> Server SSH $myip is down, stoping server process\n";
			threads->exit();
		}
	}
}

#----------------------------------------
# Inicia los calculos en cada servidor
#----------------------------------------
sub main{
	#-------------------------------------
	# Chequear que exista la carpeta
	#-------------------------------------
	opendir(FOLDER_VAR, $FOLDER)
		or die ">> Image Directory $FOLDER is empty or is not present.";
	closedir(FOLDER_VAR);
	
	#-------------------------------------
	# Agregar todas las imagenes al STACK
	#-------------------------------------
	@IMG_STACK = <$FOLDER*.tif>;
	my $stack_size = @IMG_STACK;
	print MYPROCFILE ">> $stack_size Images to process\n";
	
	my @process_stream;
	#------------------------------------------
	# Por cada servidor, iniciar procesamiento
	#------------------------------------------
	for($i = 0; $i < @MYSERVERS; $i++){
		print MYPROCFILE ">> Starting Server $MYSERVERS[$i]\n";
		my $thread = threads->create('start_server', ($MYSERVERS[$i], $MYPARALLEL_LIMIT[$i], $MYCUDA[$i], $MYCUDA_DEV[$i]));
		push(@process_stream, $thread);
	}

	for($i = 0; $i < @process_stream; $i++){
		$process_stream[$i]->join();
	}
	
	print MYPROCFILE ">> All jobs Done!\n";
}


mkdir($DEST);
open (MYERRFILE, ">>","$DEST/failed-img-log.txt")
	or die "fail";
open (MYPROCFILE, ">>", "$DEST/process-log.txt")
	or die "fail proc";
	
CheckConfigFile();
print ">> -------------------------------------\n";
my $initTime = [ Time::HiRes::gettimeofday( ) ];
main();
my $totalTime = Time::HiRes::tv_interval( $initTime );
my $minutes = floor($totalTime/60);

close(MYERRFILE);

printf ">> Total time to process %im%.3fs\n",($minutes,$totalTime-$minutes*60);
printf MYPROCFILE ">> Total time to process %im%.3fs\n",($minutes,$totalTime-$minutes*60);
close(MYPROCFILE);
